--[[
    Script: Intelligent Flick & Aim-Lock Assist w/ Toggled ESP & Force Cursor Unlock v2.0
    Description: Finds nearest valid, visually present enemy (Torso prioritized, Head fallback),
                 flicks instantly on 'E', then enters an aim-lock phase. During lock, it tracks
                 the target part and only presses/holds LMB when the aim is stable and likely to hit.
                 Releases LMB when aim becomes unstable or lock duration ends. Includes Team Check,
                 improved spectator filtering, Toggled ESP (RightCtrl), and Force Cursor Unlock (;). Optimized.
                 Improved ESP reliability, cursor management, and UI persistence on respawn.
    Trigger: Press 'E'. Target selected beforehand.
    UI Toggle: Press 'H'.
    LMB Simulation: Uses mouse1press() and mouse1release(). Falls back to VirtualUser.
    Aim Logic: Prioritizes Torso, checks visibility & visuals, locks onto valid part, shoots when stable.
    ESP: Toggled via Right Control (Default: false). Includes periodic refresh for reliability.
    Cursor Lock: Locked temporarily during flick sequence, restored after. Force unlocked via Semicolon (;).
    UI Persistence: Target UI remains visible after local player death/respawn if a target is still valid.
]]

-- // Services \\ --
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local CoreGui = game:GetService("CoreGui")
local VirtualUser -- Optional fallback service

-- // Optimized Service/Function Access \\ --
local task_wait = task.wait; local task_delay = task.delay; local task_spawn = task.spawn
local Vector2_new = Vector2.new; local CFrame_lookAt = CFrame.lookAt
local Enum_KeyCode = Enum.KeyCode; local Enum_MouseBehavior = Enum.MouseBehavior
local Enum_CameraType = Enum.CameraType; local Enum_ThumbnailType = Enum.ThumbnailType
local Enum_ThumbnailSize = Enum.ThumbnailSize; local Enum_RaycastFilterType = Enum.RaycastFilterType
local Enum_HumanoidStateType = Enum.HumanoidStateType; local Enum_HighlightDepthMode = Enum.HighlightDepthMode
local math_huge = math.huge; local math_acos = math.acos; local math_clamp = math.clamp
local math_rad = math.rad; local ipairs = ipairs; local pairs = pairs
local pcall = pcall; local typeof = typeof; local string_format = string.format
local table_insert = table.insert; local table_move = table.move; local tick = tick

pcall(function() VirtualUser = game:GetService("VirtualUser") end)

-- // Local Player & Camera \\ --
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- // Configuration \\ --
local Config = {
    TeamCheck = true, AimFOV = 70, MaxTargetDistance = 1500, TriggerKey = Enum_KeyCode.E,
    ToggleUiKey = Enum_KeyCode.H, TargetScanInterval = 0.1, AimLockDuration = 0.25,
    AimStabilityThreshold = math_rad(1.5), PostAimLockRestoreDelay = 0.03,
    MinPartSizeMagnitude = 0.5, MaxPartTransparency = 0.9,
    ManualUnlockKey = Enum_KeyCode.Semicolon, ESPEnabled = false,
    ESPToggleKey = Enum_KeyCode.RightControl, ESPRefreshInterval = 5.0,
    EnemyColor = Color3.fromRGB(255, 60, 60), TeamColor = Color3.fromRGB(60, 255, 60),
    HighlightFillTransparency = 0.8, HighlightOutlineTransparency = 0,
}

-- // State Variables \\ --
local currentTargetPlayer = nil
local currentTargetPartName = nil
local savedFOV = Camera.FieldOfView
local originalCameraType = Camera.CameraType
local originalCameraFocus = Camera.Focus
local isAiming = false
local uiEnabled = true
local lastTargetScanTime = 0
local lastESPRefreshTime = 0
local isMousePressedByScript = false
-- Removed cursor state tracking, handled directly

-- // ESP Variables \\ --
local espCache = {}
local ESPFolder = nil

-- // UI Elements (Ensure persistence) \\ --
local ConfirmGui = CoreGui:FindFirstChild("ConfirmTargetGui") or Instance.new("ScreenGui", CoreGui)
if ConfirmGui.Name ~= "ConfirmTargetGui" then ConfirmGui.Name = "ConfirmTargetGui" end
ConfirmGui.ResetOnSpawn = false -- Keep UI across spawns
ConfirmGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling; ConfirmGui.DisplayOrder = 1000

local MainFrame = ConfirmGui:FindFirstChild("MainFrame") or Instance.new("Frame", ConfirmGui)
if MainFrame.Name ~= "MainFrame" then MainFrame.Name = "MainFrame" end
MainFrame.AnchorPoint = Vector2_new(1, 1); MainFrame.Position = UDim2.new(1, -10, 1, -10); MainFrame.Size = UDim2.new(0, 150, 0, 180)
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20); MainFrame.BackgroundTransparency = 0.2; MainFrame.BorderSizePixel = 1
MainFrame.BorderColor3 = Color3.fromRGB(190, 190, 190); MainFrame.Visible = false -- Start hidden

local PlayerIcon = MainFrame:FindFirstChild("PlayerIcon") or Instance.new("ImageLabel", MainFrame)
if PlayerIcon.Name ~= "PlayerIcon" then PlayerIcon.Name = "PlayerIcon" end
PlayerIcon.Size = UDim2.new(0, 100, 0, 100); PlayerIcon.Position = UDim2.new(0.5, 0, 0, 15); PlayerIcon.AnchorPoint = Vector2_new(0.5, 0)
PlayerIcon.BackgroundTransparency = 1; PlayerIcon.ScaleType = Enum.ScaleType.Fit; PlayerIcon.Image = ""

local PlayerNameLabel = MainFrame:FindFirstChild("PlayerNameLabel") or Instance.new("TextLabel", MainFrame)
if PlayerNameLabel.Name ~= "PlayerNameLabel" then PlayerNameLabel.Name = "PlayerNameLabel" end
PlayerNameLabel.Size = UDim2.new(1, -20, 0, 20); PlayerNameLabel.Position = UDim2.new(0.5, 0, 0, 120); PlayerNameLabel.AnchorPoint = Vector2_new(0.5, 0)
PlayerNameLabel.BackgroundTransparency = 1; PlayerNameLabel.TextColor3 = Color3.fromRGB(255, 255, 255); PlayerNameLabel.TextSize = 14
PlayerNameLabel.Font = Enum.Font.SourceSansSemibold; PlayerNameLabel.Text = "No Target"; PlayerNameLabel.TextXAlignment = Enum.TextXAlignment.Center

local ConfirmText = MainFrame:FindFirstChild("ConfirmText") or Instance.new("TextLabel", MainFrame)
if ConfirmText.Name ~= "ConfirmText" then ConfirmText.Name = "ConfirmText" end
ConfirmText.Size = UDim2.new(1, -20, 0, 30); ConfirmText.Position = UDim2.new(0.5, 0, 1, -35); ConfirmText.AnchorPoint = Vector2_new(0.5, 0)
ConfirmText.BackgroundTransparency = 1; ConfirmText.TextColor3 = Color3.fromRGB(200, 200, 200); ConfirmText.TextSize = 12
ConfirmText.Font = Enum.Font.SourceSans; ConfirmText.TextWrapped = true; ConfirmText.Text = string_format('Confirm by clicking "%s"', Config.TriggerKey.Name)
ConfirmText.TextXAlignment = Enum.TextXAlignment.Center

-- // Pre-create RaycastParams for reuse \\ --
local baseIgnoreList = {Camera, ConfirmGui} -- Add ConfirmGui to ignore list
local rayParams = RaycastParams.new()
rayParams.FilterType = Enum_RaycastFilterType.Exclude; rayParams.IgnoreWater = true

-- // Functions \\ --

local function isPartRaycastVisible(targetPlayer, targetPart, originOverride)
    local localChar = LocalPlayer.Character; if not targetPart or not localChar then return false, nil end
    local origin = originOverride or Camera.CFrame.Position; local targetPosition = targetPart.Position
    local direction = (targetPosition - origin); local distance = direction.Magnitude
    if distance < 0.1 or distance > Config.MaxTargetDistance then return false, nil end
    local ignoreList = {localChar}; if targetPlayer and targetPlayer.Character then table_insert(ignoreList, targetPlayer.Character) end
    table_move(baseIgnoreList, 1, #baseIgnoreList, #ignoreList + 1, ignoreList)
    rayParams.FilterDescendantsInstances = ignoreList
    local raycastResult = Workspace:Raycast(origin, direction.Unit * distance, rayParams)
    if raycastResult then if targetPlayer and targetPlayer.Character and not raycastResult.Instance:IsDescendantOf(targetPlayer.Character) then return false, nil end; if not targetPlayer or not targetPlayer.Character then return false, nil end; return true, targetPosition else return true, targetPosition end
end

local function isPartVisuallyValid(targetPart, targetChar, targetHum)
    if not targetPart or not targetChar or not targetHum then return false end; if targetChar.Parent ~= Workspace then return false end
    local effectiveTransparency = math_clamp(targetPart.Transparency + targetPart.LocalTransparencyModifier, 0, 1); if effectiveTransparency >= Config.MaxPartTransparency then return false end
    if targetPart.Size.Magnitude < Config.MinPartSizeMagnitude then return false end; if targetHum.Sit or targetHum.PlatformStand then return false end
    if targetPart:FindFirstAncestorWhichIsA("Accessory") then return false end; return true
end

local function getValidAndVisibleTargetPart(targetPlayer, originOverride)
    local targetChar = targetPlayer and targetPlayer.Character; if not targetChar then return false, nil, nil end
    local targetHum = targetChar:FindFirstChildOfClass("Humanoid"); if not targetHum then return false, nil, nil end
    local partCheckOrder = {"UpperTorso", "Torso", "Head"}
    for _, partName in ipairs(partCheckOrder) do
        local targetPart = targetChar:FindFirstChild(partName)
        if targetPart then local isRaycastVisible, partPos = isPartRaycastVisible(targetPlayer, targetPart, originOverride); if isRaycastVisible and isPartVisuallyValid(targetPart, targetChar, targetHum) then return true, partPos, partName end end
    end
    return false, nil, nil
end

-- Update Target UI (Handles visibility based on state)
local function updateTargetUI(target)
    local shouldBeVisible = target and uiEnabled and not isAiming
    if MainFrame.Visible ~= shouldBeVisible then MainFrame.Visible = shouldBeVisible end
    if shouldBeVisible then
        local userId = target.UserId; local currentImage = PlayerIcon.Image
        if not currentImage or not string.find(currentImage, tostring(userId)) then
             task_spawn(function()
                 local s, c = pcall(Players.GetUserThumbnailAsync, Players, userId, Enum_ThumbnailType.HeadShot, Enum_ThumbnailSize.Size100x100)
                 -- Check again if still relevant when async returns
                 if s and c and MainFrame.Visible and currentTargetPlayer == target then PlayerIcon.Image = c elseif not s then PlayerIcon.Image = "" end
             end)
        end
        if PlayerNameLabel.Text ~= target.DisplayName then PlayerNameLabel.Text = target.DisplayName end
        local confirmMsg = string_format('Confirm by clicking "%s"', Config.TriggerKey.Name)
        if ConfirmText.Text ~= confirmMsg then ConfirmText.Text = confirmMsg end
    end
end

-- // ESP Functions (Improved Reliability) \\ --
local function getHighlightColor(targetPlayer) if not targetPlayer then return Config.EnemyColor end; if Config.TeamCheck and LocalPlayer and LocalPlayer.Team and targetPlayer.Team then return (targetPlayer.Team == LocalPlayer.Team) and Config.TeamColor or Config.EnemyColor else return Config.EnemyColor end end
local function cleanupEspConnections(character) if espCache[character] and espCache[character].Connections then for _, conn in ipairs(espCache[character].Connections) do pcall(conn.Disconnect, conn) end; espCache[character].Connections = nil end end
local function removeESP(character) if character and espCache[character] then cleanupEspConnections(character); if espCache[character].Highlight and espCache[character].Highlight.Parent then pcall(espCache[character].Highlight.Destroy, espCache[character].Highlight) end; espCache[character] = nil end end
local function addESP(character)
    if not Config.ESPEnabled or not character or not character.Parent or character.Parent ~= Workspace then return end; if character == LocalPlayer.Character or espCache[character] then return end
    local humanoid = character:FindFirstChildOfClass("Humanoid"); if not humanoid or humanoid.Health <= 0 then return end
    if not ESPFolder or not ESPFolder.Parent then ESPFolder = Workspace.CurrentCamera:FindFirstChild("ESPFolder") or Instance.new("Folder", Workspace.CurrentCamera); if ESPFolder.Name ~= "ESPFolder" then ESPFolder.Name = "ESPFolder" end end
    local player = Players:GetPlayerFromCharacter(character); local existingHighlight = ESPFolder:FindFirstChild(character.Name.."_ESPHighlight"); if existingHighlight then pcall(existingHighlight.Destroy, existingHighlight) end
    local highlight = Instance.new("Highlight"); highlight.Name = character.Name.."_ESPHighlight"; highlight.Adornee = character; highlight.DepthMode = Enum_HighlightDepthMode.AlwaysOnTop
    highlight.FillTransparency = Config.HighlightFillTransparency; highlight.OutlineTransparency = Config.HighlightOutlineTransparency
    local color = getHighlightColor(player); highlight.OutlineColor = color; highlight.FillColor = color; highlight.Parent = ESPFolder
    espCache[character] = { Highlight = highlight, Connections = {} }
    table_insert(espCache[character].Connections, humanoid.HealthChanged:Connect(function(health) if health <= 0 and espCache[character] then removeESP(character) end end))
    table_insert(espCache[character].Connections, character.Destroying:Connect(function() removeESP(character) end))
    table_insert(espCache[character].Connections, character:GetPropertyChangedSignal("Parent"):Connect(function() if character.Parent ~= Workspace and espCache[character] then removeESP(character) end end))
end
local function updateESPColor(character) if Config.ESPEnabled and character and espCache[character] and espCache[character].Highlight then local player = Players:GetPlayerFromCharacter(character); local color = getHighlightColor(player); espCache[character].Highlight.OutlineColor = color; espCache[character].Highlight.FillColor = color end end
local function setupPlayerESP(player)
    if not Config.ESPEnabled or player == LocalPlayer then return end; local connections = {}
    connections.charAdded = player.CharacterAdded:Connect(function(char) task_delay(0.1, function() addESP(char) end) end)
    connections.charRemoving = player.CharacterRemoving:Connect(removeESP)
    connections.teamChanged = player:GetPropertyChangedSignal("Team"):Connect(function() if player.Character then updateESPColor(player.Character) end end)
    if player.Character then task_delay(0.1, function() addESP(player.Character) end) end
end
local function initializeESP()
    if not Config.ESPEnabled then return end; print("Initializing ESP...")
    espCache = {}; if not ESPFolder or not ESPFolder.Parent then ESPFolder = Workspace.CurrentCamera:FindFirstChild("ESPFolder"); if not ESPFolder or not ESPFolder:IsA("Folder") then if ESPFolder then pcall(ESPFolder.Destroy, ESPFolder) end; ESPFolder = Instance.new("Folder", Workspace.CurrentCamera); ESPFolder.Name = "ESPFolder" else ESPFolder:ClearAllChildren() end else ESPFolder:ClearAllChildren() end
    task_spawn(function() for _, player in ipairs(Players:GetPlayers()) do setupPlayerESP(player) end end)
    lastESPRefreshTime = tick()
end
local function clearESP()
    print("Clearing ESP..."); for character, data in pairs(espCache) do removeESP(character) end
    espCache = {}; if ESPFolder and ESPFolder.Parent then pcall(ESPFolder.Destroy, ESPFolder); ESPFolder = nil end
end
local function refreshESP()
    if not Config.ESPEnabled then return end; for _, player in ipairs(Players:GetPlayers()) do if player ~= LocalPlayer and player.Character and player.Character.Parent == Workspace and not espCache[player.Character] then addESP(player.Character) end end
    for character, data in pairs(espCache) do if not character or not character.Parent or character.Parent ~= Workspace or not character:FindFirstChildOfClass("Humanoid") or character:FindFirstChildOfClass("Humanoid").Health <= 0 then removeESP(character) end end
end

-- // Mouse Simulation Functions \\ --
local function performMousePress() isMousePressedByScript = false; if typeof(mouse1press) == "function" then local s,e = pcall(mouse1press); if s then isMousePressedByScript = true; return s end end; if VirtualUser then local s,e = pcall(function() VirtualUser:Button1Down(Vector2_new()) end); if s then isMousePressedByScript = true; return s end end; warn("Flick Aim: No mouse press methods."); return false end
local function performMouseRelease() local released = false; if typeof(mouse1release) == "function" then local s,e = pcall(mouse1release); if s then released = true end end; if not released and VirtualUser then local s,e = pcall(function() VirtualUser:Button1Up(Vector2_new()) end); if s then released = true end end; isMousePressedByScript = false; if not released then warn("Flick Aim: Failed to release mouse.") end; return released end

-- // Force Cursor Unlock Function \\ --
local function forceUnlockCursor()
    print("Force Unlock Cursor Requested.")
    local success = pcall(function()
        UserInputService.MouseBehavior = Enum_MouseBehavior.Default
    end)
    if not success then warn("Flick Aim: Failed to force unlock cursor via pcall.") end
    -- No need to track lock state anymore
end

-- Function to perform the INSTANT flick, INTELLIGENT AIM-LOCK, and conditional LMB hold
local function performFlickAndLock(targetPlayer, targetPartName)
    local targetChar = targetPlayer.Character; local targetPart = targetChar and targetChar:FindFirstChild(targetPartName); local targetHum = targetChar and targetChar:FindFirstChildOfClass("Humanoid")
    if not targetHum or targetHum.Health <= 0 or not targetPart then isAiming = false; return end
    local initialRaycastVisible, targetPartPos = isPartRaycastVisible(targetPlayer, targetPart, Camera.CFrame.Position)
    if not initialRaycastVisible or not targetPartPos or not isPartVisuallyValid(targetPart, targetChar, targetHum) then isAiming = false; return end

    isAiming = true
    updateTargetUI(nil) -- Hide UI during flick/lock

    -- 1. Save State
    savedFOV = Camera.FieldOfView; originalCameraType = Camera.CameraType; originalCameraFocus = Camera.Focus
    local flickOriginalMouseBehavior = UserInputService.MouseBehavior -- Store mouse behavior JUST before locking

    -- 2. Set Aiming State & LOCK CURSOR
    Camera.CameraType = Enum_CameraType.Scriptable
    local lockSuccess = pcall(function() UserInputService.MouseBehavior = Enum_MouseBehavior.LockCenter end)
    if not lockSuccess then warn("Flick Aim: Failed to lock mouse behavior."); isAiming = false; return end -- Abort
    task_wait(); Camera.FieldOfView = Config.AimFOV

    -- 3. Instant Flick
    local startCFrame = Camera.CFrame; local endCFrame = CFrame_lookAt(startCFrame.Position, targetPartPos); Camera.CFrame = endCFrame

    -- 4. Aim-Lock Loop
    local lockStartTime = tick(); local continueLock = true
    task_spawn(function()
        while continueLock and isAiming and (tick() - lockStartTime) < Config.AimLockDuration do
            targetChar = targetPlayer.Character; targetPart = targetChar and targetChar:FindFirstChild(targetPartName); targetHum = targetChar and targetChar:FindFirstChildOfClass("Humanoid")
            if not targetHum or targetHum.Health <= 0 or not targetPart or not isPartVisuallyValid(targetPart, targetChar, targetHum) then continueLock = false; break end
            local currentCamPos = Camera.CFrame.Position; local success, newTargetPos = pcall(function() return targetPart.Position end); if not success or not newTargetPos then continueLock = false; break end
            local requiredLookVector = (newTargetPos - currentCamPos).Unit; local newLookCFrame = CFrame_lookAt(currentCamPos, newTargetPos); Camera.CFrame = newLookCFrame
            local actualLookVector = Camera.CFrame.LookVector; local dotProduct = actualLookVector:Dot(requiredLookVector); local angle = math_acos(math_clamp(dotProduct, -1.0, 1.0))
            if angle <= Config.AimStabilityThreshold then if not isMousePressedByScript then performMousePress() end else if isMousePressedByScript then performMouseRelease() end end
            RunService.Heartbeat:Wait()
        end
        if isMousePressedByScript then performMouseRelease() end
        task_wait(Config.PostAimLockRestoreDelay)
        if isAiming then -- Restore only if still considered aiming (prevents race conditions)
             Camera.FieldOfView = savedFOV; local s = pcall(function() Camera.CameraType = originalCameraType end); if not s then task_wait(); pcall(function() Camera.CameraType = Enum_CameraType.Custom end) end
             pcall(function() Camera.Focus = originalCameraFocus end)
             -- Restore original mouse behavior recorded just before the flick
             local restoreMouseSuccess = pcall(function() UserInputService.MouseBehavior = flickOriginalMouseBehavior end)
             if not restoreMouseSuccess then
                 warn("Flick Aim: Failed to restore mouse behavior after flick. Forcing Default.")
                 pcall(function() UserInputService.MouseBehavior = Enum_MouseBehavior.Default end)
             end
             isAiming = false -- Mark flick sequence as fully finished AFTER restoration
        end
    end)
end

-- Function to find the best target (Checks Vis + Validity, Torso/Head, Team)
local function findBestTarget()
    local bestTarget = nil; local bestTargetPartName = nil; local minScreenDistSq = math_huge
    local viewportSize = Camera.ViewportSize; local screenCenterX = viewportSize.X * 0.5; local screenCenterY = viewportSize.Y * 0.5
    local localChar = LocalPlayer.Character; if not localChar and Players.LocalPlayer then localChar = Players.LocalPlayer.Character end
    local camPos = Camera.CFrame.Position
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            if Config.TeamCheck and LocalPlayer and LocalPlayer.Team and player.Team and player.Team == LocalPlayer.Team then continue end
            local targetChar = player.Character
            if targetChar then
                 local targetHum = targetChar:FindFirstChildOfClass("Humanoid")
                 if targetHum and targetHum.Health > 0 then
                     local isValidAndVisible, targetPartPos, visiblePartName = getValidAndVisibleTargetPart(player, camPos)
                     if isValidAndVisible and targetPartPos and visiblePartName then
                         local screenPoint, onScreen = Camera:WorldToViewportPoint(targetPartPos)
                         if onScreen then local dx = screenPoint.X - screenCenterX; local dy = screenPoint.Y - screenCenterY; local distSq = dx*dx + dy*dy; if distSq < minScreenDistSq then minScreenDistSq = distSq; bestTarget = player; bestTargetPartName = visiblePartName end end
                     end
                 end
            end
        end
    end
    return bestTarget, bestTargetPartName
end

-- // Event Connections \\ --

-- Main Loop (Target Scan + ESP Refresh)
RunService.Heartbeat:Connect(function(dt)
    local currentTime = tick()
    if currentTime - lastTargetScanTime >= Config.TargetScanInterval then
        lastTargetScanTime = currentTime; local foundTarget, foundPartName = findBestTarget()
        if foundTarget ~= currentTargetPlayer or foundPartName ~= currentTargetPartName then currentTargetPlayer = foundTarget; currentTargetPartName = foundPartName; updateTargetUI(currentTargetPlayer)
        elseif not foundTarget and MainFrame.Visible then updateTargetUI(nil)
        elseif foundTarget and uiEnabled and not MainFrame.Visible then updateTargetUI(foundTarget) end
    end
    if Config.ESPEnabled and currentTime - lastESPRefreshTime >= Config.ESPRefreshInterval then lastESPRefreshTime = currentTime; refreshESP() end
end)

-- Input Handling (Trigger, UI Toggle, Cursor Unlock, ESP Toggle)
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    local key = input.KeyCode
    if key == Config.TriggerKey and not isAiming then
        if currentTargetPlayer and currentTargetPartName then local targetChar = currentTargetPlayer.Character; local targetHum = targetChar and targetChar:FindFirstChildOfClass("Humanoid"); if targetHum and targetHum.Health > 0 then performFlickAndLock(currentTargetPlayer, currentTargetPartName) else currentTargetPlayer = nil; currentTargetPartName = nil; updateTargetUI(nil) end end
    elseif key == Config.ToggleUiKey then uiEnabled = not uiEnabled; updateTargetUI(currentTargetPlayer)
    elseif key == Config.ManualUnlockKey then forceUnlockCursor()
    elseif key == Config.ESPToggleKey then Config.ESPEnabled = not Config.ESPEnabled; print("ESP Toggled:", Config.ESPEnabled and "ON" or "OFF"); if Config.ESPEnabled then initializeESP() else clearESP() end; lastESPRefreshTime = tick() end
end)

-- // Initialization \\ --
savedFOV = Camera.FieldOfView; -- originalMouseBehavior removed
originalCameraType = Camera.CameraType; originalCameraFocus = Camera.Focus
ConfirmText.Text = string_format('Confirm by clicking "%s"', Config.TriggerKey.Name)
if Config.ESPEnabled then initializeESP() end
print("Intelligent Flick & Aim-Lock Assist Loaded (v2.0). E:Flick | H:Toggle UI | ;:Force Unlock Cursor | RCtrl:Toggle ESP")
if typeof(mouse1press) ~= "function" or typeof(mouse1release) ~= "function" then warn("Flick Aim: Primary mouse functions not detected. Fallback may be used.") end

-- // Cleanup Function (Modified) \\ --
local function cleanup(isFullCleanup) -- Added isFullCleanup parameter
    print("Cleaning up Aim Assist & ESP...")
    if isFullCleanup and ConfirmGui then -- Only destroy UI on full cleanup
        pcall(function() ConfirmGui:Destroy() end)
        ConfirmGui = nil -- Nil out reference
    end

    local wasAiming = isAiming; isAiming = false
    if wasAiming then -- Restore camera state if aiming during cleanup
        pcall(function() Camera.FieldOfView = savedFOV end)
        local s = pcall(function() Camera.CameraType = originalCameraType end); if not s then pcall(function() Camera.CameraType = Enum_CameraType.Custom end) end
        pcall(function() Camera.Focus = originalCameraFocus end)
    elseif Camera.CameraType ~= originalCameraType then pcall(function() Camera.CameraType = originalCameraType end) end -- Restore if changed outside aiming

    if isMousePressedByScript then performMouseRelease() end

    -- Force unlock cursor to Default if it's currently locked (regardless of who locked it)
    if UserInputService.MouseBehavior == Enum_MouseBehavior.LockCenter then
        print("Cleanup: Forcing cursor unlock to Default.")
        pcall(function() UserInputService.MouseBehavior = Enum_MouseBehavior.Default end)
    end

    clearESP() -- Always clear ESP visuals on any cleanup
end

-- // Connect Cleanup to Relevant Events (Robust connection handling) \\ --
local connections = {}
local function safeDisconnect(conn) if conn then pcall(conn.Disconnect, conn); return nil else return nil end end

local function connectDied(char) -- Handles remote player death for ESP
    local humanoid = char:FindFirstChildOfClass("Humanoid"); if not humanoid then return end
    local connKey = "died_"..char:GetFullName(); connections[connKey] = safeDisconnect(connections[connKey])
    connections[connKey] = humanoid.Died:Connect(function() if Config.ESPEnabled then removeESP(char) end; connections[connKey] = safeDisconnect(connections[connKey]) end)
end

-- Handle Local Player State Changes (Death/Respawn/Char Remove) - MODIFIED
local function handleLocalPlayerRespawnReset()
     print("Local Player Respawn/Reset Detected.")
     local wasAimingCache = isAiming -- Cache aiming state

     -- Manually reset critical states WITHOUT full cleanup
     isAiming = false -- Stop any potential aiming loops
     if isMousePressedByScript then performMouseRelease() end -- Release mouse if held

     -- If died mid-flick, restore camera state
     if wasAimingCache then
         print("Resetting camera state after potential mid-flick death.")
         pcall(function() Camera.FieldOfView = savedFOV end)
         local s = pcall(function() Camera.CameraType = originalCameraType end); if not s then pcall(function() Camera.CameraType = Enum_CameraType.Custom end) end
         pcall(function() Camera.Focus = originalCameraFocus end)
         -- Force unlock cursor if it was likely locked by the flick
         if UserInputService.MouseBehavior == Enum_MouseBehavior.LockCenter then forceUnlockCursor() end
     end

     -- Re-read initial camera/focus state AFTER potential restoration/respawn
     task_wait(0.2)
     savedFOV = Camera.FieldOfView
     originalCameraType = Camera.CameraType
     originalCameraFocus = Camera.Focus

     -- DONT clear currentTargetPlayer/PartName - let scan update it naturally
     -- DONT hide UI - updateTargetUI will handle it based on currentTargetPlayer

     if Config.ESPEnabled then
         clearESP() -- Clear existing ESP fully first
         initializeESP() -- Re-initialize ESP to catch all players
     end

     updateTargetUI(currentTargetPlayer) -- Refresh UI state after reset
end

if LocalPlayer then
    if LocalPlayer.Character then connectDied(LocalPlayer.Character) end
    -- Use CharacterAdded for respawn logic
    connections.localCharAdded = LocalPlayer.CharacterAdded:Connect(function(char)
        handleLocalPlayerRespawnReset() -- Use the modified reset function
        connectDied(char)
    end)
    -- CharacterRemoving is less reliable for respawn, stick to CharacterAdded
    -- connections.localPlayerRemoving = LocalPlayer.CharacterRemoving:Connect(handleLocalPlayerRespawnReset)
else warn("Flick Aim: LocalPlayer not found.") end

connections.playerAdded = Players.PlayerAdded:Connect(setupPlayerESP)
connections.playerRemoving = Players.PlayerRemoving:Connect(function(player) if player.Character then local char = player.Character; removeESP(char); local connKey = "died_"..char:GetFullName(); connections[connKey] = safeDisconnect(connections[connKey]) end end)
connections.localTeamChanged = LocalPlayer and LocalPlayer:GetPropertyChangedSignal("Team"):Connect(function() if Config.ESPEnabled then for char, data in pairs(espCache) do updateESPColor(char) end end end) or nil

-- Connect full cleanup only to script destruction
connections.destroying = script.Destroying:Connect(function()
    cleanup(true) -- Pass true for full cleanup including UI
    for name, conn in pairs(connections) do connections[name] = safeDisconnect(conn) end
    connections = nil
end)
